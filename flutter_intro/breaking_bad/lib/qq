GridView.builder(
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      crossAxisSpacing: 20,
                      mainAxisSpacing: 20,
                      childAspectRatio: 1),
                  itemCount: snapshot.data.length,
                  itemBuilder: (BuildContext ctx, index) {
                    return GestureDetector(
                      onTap: () {
                        const ValueKey("testing");
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => QuotesScreen(
                                    id: snapshot.data[index]["char_id"],
                                    name: snapshot.data[index]["name"])));
                      },
                      child: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          image: DecorationImage(
                            image: NetworkImage(snapshot.data[index]["img"]),
                            fit: BoxFit.cover,
                          ),
                        ),
                        child: Align(
                          alignment: Alignment.bottomLeft,
                          child: Text(
                            '${snapshot.data[index]["name"]}',
                            style: const TextStyle(
                                color: Colors.white, fontSize: 30),
                          ),
                        ),
                      ),
                    );
                  },
                  padding: const EdgeInsets.all(10),
                  shrinkWrap: true,
                  reverse: false,
                );




  Future<void> fetchBbCharacters() async {
    final response = await http.get(
      Uri.parse('https://www.breakingbadapi.com/api/characters'),
    );
    if (response.statusCode == 200) {
      print("${response.body[0]}");
    }
  }









    Future<List<dynamic>> fetchBbCharacters() async {
    List<dynamic> characList = [];
    final response = await http.get(
      Uri.parse('https://www.breakingbadapi.com/api/characters'),
    );
    var resJson = jsonDecode(response.body);
    for (var i = 0; i < resJson.length; i++) {
      characList.add(resJson[i]);
    }
    return characList;
  }



  Future<Character> fetchBbCharacters() async {
    late Character char;
    late List listChar = [];
    final response = await http.get(
      Uri.parse('https://www.breakingbadapi.com/api/characters'),
    );
    if (response.statusCode == 200) {
      var res = jsonDecode(response.body);
      for (var i = 0; i < res.length; i++) {
        char = Character.fromJson(res[i]);
        listChar.add(char.toJson());
      }
    }

    return char;
  }